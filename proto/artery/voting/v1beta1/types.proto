syntax = "proto3";
package artery.voting.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "artery/voting/v1beta1/proposals.proto";
import "artery/voting/v1beta1/args.proto";
import "artery/noding/v1beta1/types.proto";

option go_package = "github.com/arterynetwork/artr/x/voting/types";

message Proposal {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.equal)            = true;

  string name = 1 [
    (gogoproto.moretags) = "yaml:\"name,omitempty\""
  ];
  string author = 2 [
    (gogoproto.jsontag)  = "author",
    (gogoproto.moretags) = "yaml:\"author\""
  ];
  ProposalType type = 3 [
    (gogoproto.jsontag)  = "type",
    (gogoproto.moretags) = "yaml:\"type\""
  ];
  uint64 end_block = 16;
  google.protobuf.Timestamp end_time = 4 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = true
  ];
  oneof args {
    PriceArgs price = 5 [
      (gogoproto.jsontag)  = "price,omitempty",
      (gogoproto.moretags) = "yaml:\"price,omitempty"
    ];
    DelegationAwardArgs delegation_award = 6 [
      (gogoproto.jsontag)  = "delegation_award,omitempty",
      (gogoproto.moretags) = "yaml:\"delegation_award,omitempty"
    ];
    NetworkAwardArgs network_award = 7 [
      (gogoproto.jsontag)  = "network_award,omitempty",
      (gogoproto.moretags) = "yaml:\"network_award,omitempty"
    ];
    AddressArgs address = 8 [
      (gogoproto.jsontag)  = "address,omitempty",
      (gogoproto.moretags) = "yaml:\"address,omitempty"
    ];
    SoftwareUpgradeArgs software_upgrade = 9 [
      (gogoproto.jsontag)  = "software_upgrade,omitempty",
      (gogoproto.moretags) = "yaml:\"software_upgrade,omitempty"
    ];
    MinAmountArgs min_amount = 10 [
      (gogoproto.jsontag)  = "min_amount,omitempty",
      (gogoproto.moretags) = "yaml:\"min_amount,omitempty"
    ];
    CountArgs count = 11 [
      (gogoproto.jsontag)  = "count,omitempty",
      (gogoproto.moretags) = "yaml:\"count,omitempty"
    ];
    StatusArgs status = 12 [
      (gogoproto.jsontag)  = "status,omitempty",
      (gogoproto.moretags) = "yaml:\"status,omitempty"
    ];
    PeriodArgs period = 13 [
      (gogoproto.jsontag)  = "period,omitempty",
      (gogoproto.moretags) = "yaml:\"period,omitempty"
    ];
    artery.noding.v1beta1.Distribution votingPower = 14 [
      (gogoproto.jsontag)  = "voting_power,omitempty",
      (gogoproto.moretags) = "yaml:\"voting_power,omitempty"
    ];
  }
}

message ProposalHistoryRecord {
  option (gogoproto.goproto_getters) = false;

  Proposal proposal = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "proposal",
    (gogoproto.moretags) = "yaml:\"proposal\""
  ];
  repeated string government = 2 [
    (gogoproto.jsontag)  = "government,omitempty",
    (gogoproto.moretags) = "yaml:\"government,omitempty\""
  ];
  repeated string agreed = 3 [
    (gogoproto.jsontag)  = "agreed,omitempty",
    (gogoproto.moretags) = "yaml:\"agreed,omitempty\""
  ];
  repeated string disagreed = 4 [
    (gogoproto.jsontag)  = "disagreed,omitempty",
    (gogoproto.moretags) = "yaml:\"disagreed,omitempty\""
  ];
  int64 started = 5 [
    (gogoproto.jsontag)  = "started,omitempty",
    (gogoproto.moretags) = "yaml:\"started,omitempty\""
  ];
  int64 finished = 6 [
    (gogoproto.jsontag)  = "finished,omitempty",
    (gogoproto.moretags) = "yaml:\"finished,omitempty\""
  ];
}

// Government is a list of accounts.
//
// For the optimization sake, it's better not to use it as a part of a more complex data struct, using simple
// `repeated string` instead.
message Government {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  repeated string members = 1 [
    (gogoproto.jsontag)  = "members",
    (gogoproto.moretags) = "yaml:\"members\""
  ];
}
