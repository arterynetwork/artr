syntax = "proto3";
package artery.bank.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/arterynetwork/artr/x/bank/types";

// Params defines the parameters for the bank module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  int64 min_send = 1 [
    (gogoproto.jsontag)  = "min_send,omitempty",
    (gogoproto.moretags) = "yaml:\"min_send,omitempty\""
  ];

  // DustDelegation - delegations below OR EQUAL TO this value will be ignored as miniscule.
  int64 dust_delegation = 2;

  // TransactionFee - share of transfer or payment for delegating amount but no more than 10artr, that goes to fee collector account, then paid to validator. Must be in range [0, 1).
  string transaction_fee = 3 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "github.com/arterynetwork/artr/util.Fraction"
  ];

  // MaxTransactionFee - transaction fee max amount in uARTR. Must be non-negative.
  int64 max_transaction_fee = 4;

  // TransactionFeeSplitRatios - the proportions in which the amount will be split among the proposer and company, the rest will be burned. The sum of proportions must be less than or equal 1.
  TransactionFeeSplitRatios transaction_fee_split_ratios = 5 [
    (gogoproto.nullable) = false
  ];

  // CompanyAccount - company account for fee payment
  string company_account = 6;
}

// The proportions in which the amount will be split among the proposer and company, the rest will be burned. The sum of proportions must be less than or equal 1.
message TransactionFeeSplitRatios {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.equal)            = true;

  // ForProposer - proposer fee part
  string for_proposer = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "github.com/arterynetwork/artr/util.Fraction"
  ];

  // ForCompany - company fee part
  string for_company = 2 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "github.com/arterynetwork/artr/util.Fraction"
  ];
}

// Supply represents a struct that passively keeps track of the total supply
// amounts in the network.
message Supply {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  repeated cosmos.base.v1beta1.Coin total = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "total",
    (gogoproto.moretags) = "yaml:\"total\""
  ];
}
